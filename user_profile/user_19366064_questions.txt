Title: Leetcode: Stone Game (How can I code it differently)
Body: <p>Problem statement:</p>
<blockquote>
<p>Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].</p>
<p>The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.</p>
<p>Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.</p>
<p>Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.</p>
</blockquote>
<p>Here is my implementation:</p>
<pre><code>def stoneGame(self, piles: List[int]) -&gt; bool:
        # return the the score difference between alice and bob(alice - bob)
        def dfs(turn, i, j):
            if i &gt; j: #no more stone left
                return 0
            
            if turn == &quot;alice&quot;: #alice tries to maximize her score
                choice1 = piles[i] + dfs(&quot;bob&quot;, i+1, j)
                choice2 = piles[j] + dfs(&quot;bob&quot;, i, j-1)
                return max(choice1, choice2)
            
            if turn == &quot;bob&quot;: #bob tries to minimize alice's score, bob's score is negative because I want to subtract it from alice
                choice1 = -piles[i] + dfs(&quot;alice&quot;, i+1, j)
                choice2 = -piles[j] + dfs(&quot;alice&quot;, i, j-1)
                return min(choice1, choice2) #take the smallest and subtract it from alice. 
        
        
        return (dfs(&quot;alice&quot;, 0, len(piles)-1)) &gt; 0
        #if alice - bob &gt; 0, that means alice has more points so she wins
</code></pre>
<p>I solve it by calculating the net different between alice and bob. How can I change my code so that I'm able to record alice's and bob's score instead of just keeping track of their difference.</p>


Title: Why does adding DP to my recursion make it stop working correctly?
Body: <p>Can someone please tell me why the two codes give different outputs. Aren't they the same code with two different implementations (one is brute force and the other one is using Dynamic Programming).</p>
<p>Program Description: Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p>
<pre><code>def minPathSum_dp(grid):
        def dfs(i, j, pathSum):
            if (i, j) in dp:
                return dp[(i, j)]
            
            if i == len(grid)-1 and j == len(grid[i])-1:
                return pathSum + grid[i][j]

            if i == len(grid)-1:
                return dfs(i, j+1, pathSum + grid[i][j])
            
            if j == len(grid[i])-1:
                return dfs(i+1, j, pathSum + grid[i][j])
            
            path1 = dfs(i+1, j, pathSum + grid[i][j])
            path2 = dfs(i, j+1, pathSum + grid[i][j])
            dp[(i, j)] = min(path1, path2)
            return dp[(i, j)]
        
        dp = {}
        return dfs(0, 0, 0) 

def minPathSum_bf(grid):
        def dfs(i, j, pathSum):          
            if i == len(grid)-1 and j == len(grid[i])-1:
                return pathSum + grid[i][j]
            
            if i == len(grid)-1:
                return dfs(i, j+1, pathSum + grid[i][j])
            
            if j == len(grid[i])-1:
                return dfs(i+1, j, pathSum + grid[i][j])
            
            path1 = dfs(i+1, j, pathSum + grid[i][j])
            path2 = dfs(i, j+1, pathSum + grid[i][j])
            return min(path1, path2)
        
        return dfs(0, 0, 0) 

grid = [[1,4,8,6,2,2,1,7],[4,7,3,1,4,5,5,1],[8,8,2,1,1,8,0,1],[8,9,2,9,8,0,8,9],[5,7,5,7,1,8,5,5],[7,0,9,4,5,6,5,6],[4,9,9,7,9,1,9,0]]

UPDATED: WORKING SOLUTION

def minPathSum(self, grid: List[List[int]]) -&gt; int:
        def dfs(i, j):
            if (i, j) in dp:
                return dp[(i, j)]
            
            if i == len(grid)-1 and j == len(grid[i])-1:
                return grid[i][j]
            
            if i == len(grid)-1:
                dp[(i, j)] = grid[i][j] + dfs(i, j+1)
                return dp[(i, j)]
            
            if j == len(grid[i])-1:
                dp[(i, j)] = grid[i][j] + dfs(i+1, j)
                return dp[(i, j)]
            
            path1 = grid[i][j] + dfs(i+1, j)
            path2 = grid[i][j] + dfs(i, j+1)
            dp[(i, j)] = min(path1, path2)
            return dp[(i, j)]
        
        dp = {}
        return dfs(0, 0)

print(minPathSum_dp(grid))
print(minPathSum_bf(grid))
</code></pre>


Title: Return immediately for recursive calls
Body: <p>Problem Statement:
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.</p>
<p>How can I change my code so that it returns immediately when I have found a path that works for this problem instead of going through all the recursive calls that I have made previously</p>
<pre><code>def canJump(self, nums: List[int]) -&gt; bool:
    solve = [False]
    def backtrack(i):
        if solve[0] == True:
            return
        
        if i == len(nums)-1:
            solve[0] = True
            return
        
        if i &gt;= len(nums) or nums[i] == 0:
            return
        
        for x in range(1, nums[i]+1):
            backtrack(i+x)
    
    backtrack(0)
    return solve[0]
</code></pre>


Title: Permutation implementation
Body: <p>permutation_str works fine but permutation_arr doesn't output the correct answer. I don't see why the two functions are generating different outputs given the fact that they have the same implementation. Is there something that I'm missing?</p>
<pre><code>def permutation_arr(res, arr):
    if len(arr) == 0:
        print(res)
    
    for i in range(len(arr)):
        res.append(arr[i])
        permutation_arr(res, arr[:i] + arr[i+1:])
        res = res[:-1]

permutation_arr([], [1,2,3])

def permutation_str(res, str):
    if len(str) == 0:
        print(res)
    
    for i in range(len(str)):
        res = res + str[i]
        permutation_str(res, str[:i] + str[i+1:])
        res = res[:-1]

permutation_str(&quot;&quot;, &quot;123&quot;)
</code></pre>


Title: What is wrong with my implementation of the knapsack problem
Body: <p>items = [[profit, weight]...]</p>
<pre><code>items = [[44,92], [46,4], [90,43], [72,83], [91,84], [40,68], [75,92], [35,82], [8,6], [54,44], [78,32], [40,18], [77,56], [15,83], [61,25], [17,96], [75,70], [29,48], [75,14], [63,58]]
max_weight = 269
def knapsack_bruteforce(items, max_weight):
    def backtrack(i, curr_profit, curr_weight):       
        if(i+1 &gt;= len(items) or curr_weight + items[i+1][1] &gt; max_weight):
            return curr_profit
            
        return max(backtrack(i+1, curr_profit + items[i+1][0], curr_weight + items[i+1][1]), backtrack(i+1, curr_profit, curr_weight))
        
    return backtrack(-1, 0, 0)

</code></pre>
<p>knapsack_bruteforce(items, max_weight) should return 550 as the maximum profit but I'm getting
528 instead.</p>


