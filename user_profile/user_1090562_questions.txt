Title: What am I missing in DFS in knight tour?
Body: <p>I am trying to solve the <a href="http://en.wikipedia.org/wiki/Knight%27s_tour" rel="nofollow">knight tour problem</a> using DFS. I generated my graph (in this example I have 5x5 matrix):</p>

<pre><code>{
  0: set([11, 7]),
  1: set([8, 10, 12]),
  2: set([9, 11, 5, 13]),
  3: set([12, 14, 6]),
  4: set([13, 7]),
  5: set([16, 2, 12]), 6: set([17, 3, 13, 15]), 7: set([0, 4, 10, 14, 16, 18]), 8: set([19, 1, 11, 17]), 9: set([2, 12, 18]), 10: set([1, 17, 21, 7]), 11: set([0, 2, 8, 18, 20, 22]), 12: set([1, 3, 5, 9, 15, 19, 21, 23]), 13: set([2, 4, 6, 16, 22, 24]), 14: set([23, 17, 3, 7]), 15: set([12, 22, 6]), 16: set([23, 7, 5, 13]), 17: set([6, 8, 10, 14, 20, 24]), 18: set([9, 11, 21, 7]), 19: set([8, 12, 22]), 20: set([17, 11]), 21: set([10, 12, 18]), 
  22: set([19, 11, 13, 15]),
  23: set([16, 12, 14]),
  24: set([17, 13])
}
</code></pre>

<p>Then I am trying to invoke DFS to find the path that has the length of 25 (each square was reached). To do this I track the current path, compare it with a desired length and if it was not reached recursively span DFS from all the neighbors. If there are no unchecked neighbors (we reached the dead end but there are still squares that should be reached), I am removing the last element from the path.</p>

<pre><code>def knightTour(current, limit, path):
    if len(path) == limit:
        return path

    path.append(current)

    neighbors = graph[current]
    if len(neighbors):
        for i in neighbors:
            if i not in set(path):
                return knightTour(i, limit, path)
    else:
        path.pop()
        return False

knightTour(0, 24, [])
</code></pre>

<p>I am missing something obvious because in my case it can not find the full path and got stuck with <code>[0, 11, 2, 9, 12, 1, 8, 19, 22, 13, 4, 7, 10, 17, 6, 3, 14, 23, 16]</code>. Any idea where is my mistake?</p>


Title: simplifying binomial coefficient calculation
Body: <p>I am trying to reduce the calculation for the following binomial sum:</p>

<pre><code>def binomial(m, k):
    result = 1
    for i in range(k):
        result = result * (m - i) / (i + 1)
    return result

n, t = 10, 20
bin2 = binomial(n + t, n)
for i in xrange(n + 1):
    bin2 = binomial(n + t - i, n)    # recalculation here. 
    # bin2 = bin2 * (t - i) / (n + t - i) my wrong implementation
    print bin2
</code></pre>

<p>what I do not like here is that bin2 is recalculated all the time during the loop, when I should have used previously calculated bin2. I understand that I have to use formula from <a href="http://en.wikipedia.org/wiki/Combination" rel="nofollow noreferrer">here</a> <img src="https://i.sstatic.net/n4QfR.png" alt="enter image description here">,</p>

<p>but my wrong implementation give incorrect result. Any idea how should I simplify it?</p>


Title: Find the number of divisors of (N!)^2
Body: <p>I am trying to solve the <a href="https://www.hackerrank.com/challenges/equations" rel="nofollow">following problem</a>, which I reduced to the:
<strong>find the number of divisors of (N!)^2</strong></p>

<p>I coded up my solution, which I included as an answer here (for the reason of not being accused of not doing any work), and it works properly and fast for even big numbers, but because it does not pass all the tests due to the timeout, I think that my algorithm is not so efficient.</p>

<p>Here is outline of my idea:</p>

<ol>
<li>Any number can be presented as <code>a0^b1*a1^b1*...*an^bn</code> which will have <code>(1 + b1)*(1 + b2)*...*(1 + bn)</code> divisors</li>
<li>then <code>M^2</code> will have <code>(1 + 2b1)*(1 + 2b2)*...*(1 + 2bn)</code> divisors</li>
<li>create a function which finds all factors of the number and save them as a hashmap</li>
<li>have a function which will combine two hashmaps by adding the values of corresponding keys</li>
<li>use these 2 functions to iterate through all the numbers from 2 to n to get all divisors of factorial</li>
<li>use the function from 1. to get the answer</li>
</ol>

<p>I thought that this solution is pretty efficient, but it looks like there is a better way.
Can anyone suggest me a better way?</p>


Title: How to find a complexity of a built-in function in python
Body: <p>I have the special case of the problem, but it would be nice to know whether it is possible for any function.</p>

<p>So I want to find the position of a substring in a string. Ok, in python there is a <a href="https://docs.python.org/2/library/string.html#string.find" rel="noreferrer">find method</a> which does exactly what is needed.</p>

<blockquote>
  <p><strong>string.find(s, sub[, start[, end]])</strong></p>
  
  <p>Return the lowest index in s where
  the substring sub is found such that sub is wholly contained in
  s[start:end]. Return -1 on failure. Defaults for start and end and
  interpretation of negative values is the same as for slices.</p>
</blockquote>

<p>Amazing, but the problem is that finding a big substring in a big string can run from <code>O(n*m)</code> to <code>O(n)</code> (which is a huge deal) <a href="http://en.wikipedia.org/wiki/String_searching_algorithm" rel="noreferrer">depending on the algorithm</a>. Documentation gives no information about time complexity, nor information about the underlying algorithm.</p>

<p>I see few approaches how to resolve this:</p>

<ul>
<li>benchmark </li>
<li>go to source code and try to understand it</li>
</ul>

<p>Both does not sound really easy (I hope that there is an easier way). So how can I find a complexity of a built-in function?</p>


Title: Performance issues in Burrows-Wheeler in python
Body: <p>I was trying to implement <a href="http://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform" rel="noreferrer">Burrows-Wheeler</a> transform in python. (This is one of the assignments in online course, but I hope I have done some work to be qualified to ask for help).</p>

<p>The algorithm works as follows. Take a string which ends with a special character ($ in my case) and create all cyclic strings from this string. Sort all these strings alphabetically, having a special character always less then any other character. After this get the last element of each string.</p>

<p>This gave me a oneliner: </p>

<pre><code>''.join([i[-1] for i in sorted([text[i:] + text[0:i] for i in xrange(len(text))])]
</code></pre>

<p>Which is correct and reasonably fast for reasonably big strings (which is enough to solve the problem):</p>

<pre><code> 60 000 chars - 16 secs
 40 000 chars - 07 secs
 25 000 chars - 02 secs
</code></pre>

<p>But when I tried to process a really huge string with few millions of chars, I failed (it takes too much time to process).</p>

<p>I assume that the problem is with storing too many strings in the memory.</p>

<p>Is there any way to overcome this?</p>

<p>P.S. just want to point out that also this might look like a homework problem, my solution already passes the grader and I am just looking for a way to make it faster. Also I am not spoiling the fun for other people, because if they would like to find solution, wiki article has one which is similar to mine. I also checked <a href="https://codereview.stackexchange.com/a/21120/30711">this questio</a>n which sounds similar but answers a harder question, how to decode the string coded with this algorithm.</p>


